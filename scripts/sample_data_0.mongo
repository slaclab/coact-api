//
// At a top level, we have a Facility. A Facility contains Repos.

// A Facility will have Capacities that define the amount of resource that is available to that Facility.
// At the moment, we only have a count of the compute resource that is available to the Facility. This is defined as
// a count of the number of compute servers from each Cluster.

// We only currently associate storage with a Repo.
// We have different classes of storage (science-data, group, etc). and each Repo may have none or many of each
// type. We want to keep tabs of the Quota ie the Repo's storage Capacity.
// We keep the permissions model of the storage with an Access Class and associate them to Volumes. It is the Volumes
// that are associated with the Repos.

// is this backwards? on one hand we have the Facility with a total Capacity, and we provide percentage Allocations of compute to each Repo; but with storage we have a an absolute quota per volume in a Repo; but don't actually keep anything yet in the Facility regarding storage.

// Facilities have compute classes and storage classes associated with them.


db.getSiblingDB("iris").facilities.insertOne({
  "name" : "LCLS",
  "resources": ["compute", "storage"],
  "serviceaccount": "lcls-pcdsdata", // set primary uid on all volumes
  "servicegroup": "lcls-pcdsmgr", // set primary gid on all volumes
  "czars": [ "mshankar", "wilko" ],
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "sdfhome",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/home/$usernamefirstchar/$username"
        }
      ]
    }
  }
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "CryoEM",
  "resources": ["compute", "storage"],
  "serviceaccount": "cryo-daq", // set primary uid on all volumes
  "servicegroup": "cryo-data", // set primary gid on all volumes
  "czars": [ "ytl"],
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "sdfhome",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/home/$usernamefirstchar/$username"
        }
      ]
    }
  }
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "SUNCAT",
  "resources": ["compute", "storage"],
  "serviceaccount": "suncat", // set primary uid on all volumes
  "servicegroup": "suncat", // set primary gid on all volumes
  "czars": [ "johannes"], // set primary uid on all volumes
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "sdfhome",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/home/$usernamefirstchar/$username"
        }
      ]
    }
  }
})


// Clusters are compute resources; a cluster consists of CPU/GPU nodes.

db.getSiblingDB("iris").clusters.insertOne({
  "name": "roma",
  "nodecpucount": 128,
  "nodecpucountdivisor": 64, //?? sockets?
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ ] // perhaps use regex?
})
for(c=0;c<32;c++) {   db.getSiblingDB("iris").clusters.updateOne({"name": "roma"}, {"$addToSet": {"members": "sdfrome"+String(c).padStart(4,'0')}})}


db.getSiblingDB("iris").clusters.insertOne({
  "name": "milano",
  "nodecpucount": 128,
  "nodecpucountdivisor": 16, //??
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ ]
})
for(c=0;c<28;c++) {   db.getSiblingDB("iris").clusters.updateOne({"name": "roma"}, {"$addToSet": {"members": "sdfmilan"+String(c).padStart(4,'0')}})}

db.getSiblingDB("iris").clusters.insertOne({
  "name": "ampt",
  "nodecpucount": 128,
  "nodecpucountdivisor": 16, //??
  "nodememgb": 1024,
  "chargefactor": 0.8,
  "nodecpusmt": 2, // threads per core
  "nodegpucount": 4,
  "nodegpumemgb": 40,
  "members": [ "sdfampt001", "sdfampt002","sdfampt003","sdfampt004","sdfampt005" ]
})


// Too lazy to create all the cluster members for psana


// Similar to clusters, physical volumes are storage resources.
// Like Kubernetes, physical volumes are associated with a storage class ( SSD/Disk/Tape ) etc.


// User home first
db.getSiblingDB("iris").physical_volumes.insertOne({
  "name": "sdfhome",
  "storageclass": "ssd",
  "gigabytes": 1000000,
  "inodes": 100000
})

// End the description of resources....

// Facilities purchase compute and storage on various clusters and volumes.

db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "roma",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 100000
})
db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "milano",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 200000
})

db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "CryoEM",
  "clustername": "roma",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 200000
})

db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "sdfdata",
  "purpose": "data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 20000000,
  "inodes": 100000000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "sdfhome",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 100000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "sdfhome",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 100000,
})

db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "sdfdata",
  "purpose": "data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 40000000,
  "inodes": 400000000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "sdfhome",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 5500000,
  "inodes": 7600000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "sdfhome",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 5500000,
  "inodes": 7600000,
})

// users
db.getSiblingDB("iris").users.insertOne({ "username": "mshankar", "uidnumber": 11042, "eppns": [ "mshankar@slac.stanford.edu", "muralis@stanford.edu" ], "shell": "/bin/bash", "preferredemail": "mshankar@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "ytl", "uidnumber": 7017, "eppns": [ "ytl@slac.stanford.edu", "yee379@stanford.edu" ], "shell": "/bin/bash", "preferredemail": "ytl@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "wilko", "uidnumber": 2871, "eppns": [ "wilko@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "wilko@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "perazzo", "uidnumber": 3934, "eppns": [ "perazzo@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "perazzo@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "yemi", "uidnumber": 5275, "eppns": [ "yemi@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "yemi@slac.stanford.edu" })
//db.getSiblingDB("iris").users.insertOne({ "username": "richard", "uidnumber": 1088, "eppns": [ "richard@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "richard@slac.stanford.edu" })

// User_Volume_Storage_Allocation

["mshankar", "ytl", "wilko", "perazzo", "yemi", "richard"].forEach(function(u){
  db.getSiblingDB("iris").user_storage_allocation.insertOne({
    "username": u,
    "storagename": "sdfhome",
    "purpose": "home",
    "gigabytes": 20,
    "inodes": 1000,
    "rootfolder": "<prefix>/home/" + u[0] + "/" + u
  })
})


["mshankar", "ytl", "wilko", "perazzo", "yemi", "richard"].forEach(function(u){
  let allocid = db.getSiblingDB("iris").user_storage_allocation.findOne({"username": u, "purpose": "home" })["_id"]
  db.getSiblingDB("iris").user_storage_usage.insertOne({
    "allocid": allocid,
    "date": new Date(),
    "gigabytes": 19.99,
    "inodes": 976,
  })
})
