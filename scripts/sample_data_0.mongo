//
// At a top level, we have a Facility. A Facility contains Repos.

// A Facility will have Capacities that define the amount of resource that is available to that Facility.
// At the moment, we only have a count of the compute resource that is available to the Facility. This is defined as
// a count of the number of compute servers from each Cluster.

// We only currently associate storage with a Repo.
// We have different classes of storage (science-data, group, etc). and each Repo may have none or many of each
// type. We want to keep tabs of the Quota ie the Repo's storage Capacity.
// We keep the permissions model of the storage with an Access Class and associate them to Volumes. It is the Volumes
// that are associated with the Repos.

// is this backwards? on one hand we have the Facility with a total Capacity, and we provide percentage Allocations of compute to each Repo; but with storage we have a an absolute quota per volume in a Repo; but don't actually keep anything yet in the Facility regarding storage.

// Facilities have compute classes and storage classes associated with them.


db.getSiblingDB("iris").facilities.insertOne({
  "name" : "LCLS",
  "resources": ["compute", "storage"],
  "serviceaccount": "lcls-pcdsdata", // set primary uid on all volumes
  "servicegroup": "lcls-pcdsmgr", // set primary gid on all volumes
  "czars": [ "mshankar", "wilko" ],
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "sdfhome",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/home/$usernamefirstchar/$username"
        }
      ]
    }
  }
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "CryoEM",
  "resources": ["compute", "storage"],
  "serviceaccount": "cryo-daq", // set primary uid on all volumes
  "servicegroup": "cryo-data", // set primary gid on all volumes
  "czars": [ "ytl"],
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "sdfhome",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/home/$usernamefirstchar/$username"
        }
      ]
    }
  }
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "SUNCAT",
  "resources": ["compute", "storage"],
  "serviceaccount": "suncat", // set primary uid on all volumes
  "servicegroup": "suncat", // set primary gid on all volumes
  "czars": [ "johannes"], // set primary uid on all volumes
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "sdfhome",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/home/$usernamefirstchar/$username"
        }
      ]
    }
  }
})



// Facilities purchase compute and storage on various clusters and volumes.

db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "roma",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 100000
})
db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "milano",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 200000
})

db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "CryoEM",
  "clustername": "roma",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 200000
})

db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "sdfdata",
  "purpose": "data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 20000000,
  "inodes": 100000000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "sdfhome",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 100000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "sdfhome",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 100000,
})

db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "sdfdata",
  "purpose": "data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 40000000,
  "inodes": 400000000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "sdfhome",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 5500000,
  "inodes": 7600000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "sdfhome",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 5500000,
  "inodes": 7600000,
})

