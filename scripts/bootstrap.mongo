
//
// initial users
// 
db.getSiblingDB("iris").users.insertOne({ "username": "mshankar", "uidnumber": 11042, "eppns": [ "mshankar@slac.stanford.edu", "muralis@stanford.edu" ], "shell": "/bin/bash", "preferredemail": "mshankar@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "ytl", "uidnumber": 7017, "eppns": [ "ytl@slac.stanford.edu", "yee379@stanford.edu" ], "shell": "/bin/bash", "preferredemail": "ytl@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "wilko", "uidnumber": 2871, "eppns": [ "wilko@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "wilko@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "perazzo", "uidnumber": 3934, "eppns": [ "perazzo@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "perazzo@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "yemi", "uidnumber": 5275, "eppns": [ "yemi@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "yemi@slac.stanford.edu" })
//db.getSiblingDB("iris").users.insertOne({ "username": "richard", "uidnumber": 1088, "eppns": [ "richard@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "richard@slac.stanford.edu" })

// User_Volume_Storage_Allocation

["mshankar", "ytl", "wilko", "perazzo", "yemi", "richard"].forEach(function(u){
  db.getSiblingDB("iris").user_storage_allocation.insertOne({
    "username": u,
    "storagename": "sdfhome",
    "purpose": "home",
    "gigabytes": 25,
    "inodes": 1000000,
    "rootfolder": "<prefix>/home/" + u[0] + "/" + u
  })
})


["mshankar", "ytl", "wilko", "perazzo", "yemi", "richard"].forEach(function(u){
  let allocid = db.getSiblingDB("iris").user_storage_allocation.findOne({"username": u, "purpose": "home" })["_id"]
  db.getSiblingDB("iris").user_storage_usage.insertOne({
    "allocid": allocid,
    "date": new Date(),
    "gigabytes": Math.random()*25,
    "inodes": Math.random()*1000000,
  })
})


//
// Clusters are compute resources; a cluster consists of CPU/GPU nodes.
//

db.getSiblingDB("iris").clusters.insertOne({
  "name": "roma",
  "nodecpucount": 128,
  "nodecpucountdivisor": 64, //?? sockets?
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ ] // perhaps use regex?
})
for(c=0;c<32;c++) {   db.getSiblingDB("iris").clusters.updateOne({"name": "roma"}, {"$addToSet": {"members": "sdfrome"+String(c).padStart(4,'0')}})}


db.getSiblingDB("iris").clusters.insertOne({
  "name": "milano",
  "nodecpucount": 128,
  "nodecpucountdivisor": 16, //??
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ ]
})
for(c=0;c<28;c++) {   db.getSiblingDB("iris").clusters.updateOne({"name": "roma"}, {"$addToSet": {"members": "sdfmilan"+String(c).padStart(4,'0')}})}

db.getSiblingDB("iris").clusters.insertOne({
  "name": "ampere",
  "nodecpucount": 128,
  "nodecpucountdivisor": 64, //??
  "nodememgb": 1024,
  "chargefactor": 0.8,
  "nodecpusmt": 2, // threads per core
  "nodegpucount": 4,
  "nodegpumemgb": 40,
  "nodecpusmt": 2, // threads per core
  "members": [ ]
})
for(c=0;c<6;c++) {   db.getSiblingDB("iris").clusters.updateOne({"name": "roma"}, {"$addToSet": {"members": "sdfampere"+String(c).padStart(4,'0')}})}

//
// Storage
// Similar to clusters, physical volumes are storage resources.
// Like Kubernetes, physical volumes are associated with a storage class ( SSD/Disk/Tape ) etc.
//

// User home first
db.getSiblingDB("iris").physical_volumes.insertOne({
  "name": "sdfhome",
  "storageclass": "ssd",
  "gigabytes": 2000000000,
  "inodes": 100000000
})

db.getSiblingDB("iris").physical_volumes.insertOne({
  "name": "sdfdata",
  "storageclass": "ssd",
  "gigabytes": 4000000000,
  "inodes": 1000000000
})
