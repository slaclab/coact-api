// Data for testing etc
db.getSiblingDB("iris").users.insertOne({ "username": "aquila", "uidnumber": 123, "eppns": [ "aquila@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "aquila@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "mcbrowne", "uidnumber": 124, "eppns": [ "mcbrowne@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "mcbrowne@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "snelson", "uidnumber": 125, "eppns": [ "snelson@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "snelson@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "tmalla", "uidnumber": 126, "eppns": [ "tmalla@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "tmalla@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "yanwen", "uidnumber": 127, "eppns": [ "yanwen@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "yanwen@slac.stanford.edu" })

// User compute allocation percent



db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "RepoMembership", "username" : "wilko", "reponame" : "cxi12345", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "RepoMembership", "username" : "wilko", "reponame" : "CA104", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "RepoMembership", "username" : "mshankar", "reponame" : "CA104", "requestedby": "mshankar", "timeofrequest": new Date()})
// // Two people requesting the same repo/facility
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewRepo", "username" : "wilko",    "reponame" : "cxi23456", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewRepo", "username" : "mshankar", "reponame" : "cxi23456", "requestedby": "mshankar", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewFacility", "username" : "wilko",    "facilityname" : "RUBIN", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewFacility", "username" : "mshankar", "facilityname" : "RUBIN", "requestedby": "mshankar", "timeofrequest": new Date()})
//
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "paul@stanford.edu", "preferredUserName": "paul", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "george@stanford.edu", "preferredUserName": "george", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "john@stanford.edu", "preferredUserName": "john", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "ringo@stanford.edu", "preferredUserName": "ringo", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
// // These are requests for user account whose username already exists in the system.
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "wilko@stanford.edu", "preferredUserName": "wilko", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "mshankar@stanford.edu", "preferredUserName": "mshankar", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "ytl@stanford.edu", "preferredUserName": "ytl", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})



// an access class defines an abstraiton of access to some data. as such, by itself it merely defines essentially just a gidnumber. these shoudl be associated with eitehr: (note that all three can apply to all related storage)
// 1) facility (to have all data under that facility with say the same primiarly group id defined in the access group)
// 2) to a repo; so that the repo has this gid
// 3) to a volume so that only that volume has that gid

// facility service account; use the gid as default and uids from members as primary owners
// These do not belong to a repo.
db.getSiblingDB("iris").access_groups.insertOne({"name": "lcls-pcdsmgr", "gidnumber": 808080, "members": [ "pcdmgr" ]})
db.getSiblingDB("iris").access_groups.insertOne({"name": "cryo-data", "gidnumber": 6363, "members": [ "cryo-daq"]})

// no members means nothing special - use the principal, leaders and users for this group
db.getSiblingDB("iris").access_groups.insertOne({"name": "cxi12345-analysis", "repo": "cxi12345", "gidnumber": 12345, "members": ["mshankar"]})
db.getSiblingDB("iris").access_groups.insertOne({"name": "CS14", "gidnumber": "repo": "CS14", 8393, "members": []})
db.getSiblingDB("iris").access_groups.insertOne({"name": "CA104", "gidnumber": "repo": "CA104", 8343, "members": []})


// End of users and groups


// Repos now - repos are the fundamental unit of allocations of resources

db.getSiblingDB("iris").repos.insertOne({
  "name": "cxi12345",
  "facility": "LCLS",
  "principal": "aquila",
  "leaders": [ "snelson" ],
  "users": [ "aquila", "mcbrowne", "snelson", "tmalla", "yanwen", "mshankar" ]
})

db.getSiblingDB("iris").repos.insertOne({
  "name": "CS14",
  "facility": "CryoEM",
  "principal": "ytl",
  "leaders": [],
  "users": [ "cszhang" ]

})
db.getSiblingDB("iris").repos.insertOne({
  "name": "CA104",
  "facility": "CryoEM",
  "principal": "mshankar",
  "leaders": [ "ytl" ],
  "users": [ ]
})


// Repo allocations and usage.
// We separate out compute and storage allocations.
// Apologies for the long collection names; this makes it easier when building out the model.

// We allocate compute on a specific cluster.

// compute allocations
// in terms of a compute quota; we assume that slachours already considers things like cpu/gpu and has the
// calculated weights required for varying cluster performances.
// Each allocation can be divided up into qos'es
// This lets you allocate, for example, 500 hours of regular processing and 500 hours of premium high-priority processing.

db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "cxi12345",
  "clustername": "psana",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "qoses": {
    "cxi12345": {
      "slachours": 500,
      "chargefactor": 0.7765
    },
    "cxi12345-priority": {
      "slachours": 500,
      "chargefactor": 1.25
    }
  }
})

db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "cxi12345",
  "clustername": "milan-srcf",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "qoses": {
    "cxi12345": {
      "slachours": 600,
      "chargefactor": 0.7765
    },
    "cxi12345-priority": {
      "slachours": 600,
      "chargefactor": 1.25
    }
  }
})

// This is last years allocation for the same repo
db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "cxi12345",
  "clustername": "psana",
  "start": ISODate("2020-05-01T00:00:00-07:00"), // Last years allocations
  "end": ISODate("2020-12-31T00:00:00Z"),
  "qoses": {
    "cxi12345": {
      "slachours": 7865320,
      "chargefactor": 1.0
    },
    "cxi12345-priority": {
      "slachours": 1,
      "chargefactor": 1.25
    }
  }
})

db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "CA104",
  "clustername": "milan-srcf",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "qoses": {
    "CA104": {
      "slachours": 400,
      "chargefactor": 0.7765
    },
    "CA104-priority": {
      "slachours": 400,
      "chargefactor": 1.25
    }
  }
})


// We allocate compute on a specific physical volume for a particular purpose.
// For example, we'd allocate 10TB for data, 10GB for scratch etc.
db.getSiblingDB("iris").repo_storage_allocations.insertOne({
  "repo": "cxi12345",
  "storagename": "wekassd2022",
  "purpose": "science-data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 1000,
  "rootfolder": "<prefix>/cxi/cxi12345/xtc"
})
db.getSiblingDB("iris").repo_storage_allocations.insertOne({
  "repo": "cxi12345",
  "storagename": "wekassd2022",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 2000,
  "inodes": 10000,
  "rootfolder": "<prefix>/cxi/cxi12345/scratch"
})
db.getSiblingDB("iris").repo_storage_allocations.insertOne({
  "repo": "cxi12345",
  "storagename": "wekassd2022",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 20,
  "inodes": 100,
  "rootfolder": "<prefix>/cxi/cxi12345/results"
})


// Jobs have lots of information from SLURM in addition to the final mapping into repo, year and resource name.
