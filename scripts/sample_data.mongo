//
// At a top level, we have a Facility. A Facility contains Repos.

// A Facility will have Capacities that define the amount of resource that is available to that Facility.
// At the moment, we only have a count of the compute resource that is available to the Facility. This is defined as
// a count of the number of compute servers from each Cluster.

// We only currently associate storage with a Repo.
// We have different classes of storage (science-data, group, etc). and each Repo may have none or many of each
// type. We want to keep tabs of the Quota ie the Repo's storage Capacity.
// We keep the permissions model of the storage with an Access Class and associate them to Volumes. It is the Volumes
// that are associated with the Repos.

// is this backwards? on one hand we have the Facility with a total Capacity, and we provide percentage Allocations of compute to each Repo; but with storage we have a an absolute quota per volume in a Repo; but don't actually keep anything yet in the Facility regarding storage.

db.getSiblingDB("iris").facilities.createIndex({"name": 1}, unique=true)
// Facilities have compute classes and storage classes associated with them.


db.getSiblingDB("iris").facilities.insertOne({
  "name" : "LCLS",
  "resources": ["compute", "storage"],
  "serviceaccount": "lcls-pcdsdata", // set primary uid on all volumes
  "servicegroup": "lcls-pcdsmgr", // set primary gid on all volumes
  "czars": [ "mshankar", "wilko" ],
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "wekassd2022",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/homes/$usernamefirstchar/$username"
        }
      ]
    }
  }
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "CryoEM",
  "resources": ["compute", "storage"],
  "serviceaccount": "cryo-daq", // set primary uid on all volumes
  "servicegroup": "cryo-data", // set primary gid on all volumes
  "czars": [ "ytl"],
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "wekassd2022",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/homes/$usernamefirstchar/$username"
        }
      ]
    }
  }
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "Suncat",
  "resources": ["compute", "storage"],
  "serviceaccount": "suncat", // set primary uid on all volumes
  "servicegroup": "suncat", // set primary gid on all volumes
  "czars": [ "johannes"], // set primary uid on all volumes
  "policies": {
    "UserAccount": {
      "user_storage_allocation": [
        {
          "username": "$username",
          "storagename": "wekassd2022",
          "purpose": "home",
          "gigabytes": 20,
          "inodes": 1000,
          "rootfolder": "<prefix>/homes/$usernamefirstchar/$username"
        }
      ]
    }
  }
})


// Clusters are compute resources; a cluster consists of CPU/GPU nodes.
db.getSiblingDB("iris").clusters.createIndex({"name": 1}, unique=true)

db.getSiblingDB("iris").clusters.insertOne({
  "name": "rome-b050",
  "nodecpucount": 128,
  "nodecpucountdivisor": 64, //?? sockets?
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ "rome0001", "rome0002","rome0003","rome0004","rome0005" ] // perhaps use regex?
})


db.getSiblingDB("iris").clusters.insertOne({
  "name": "milan-srcf",
  "nodecpucount": 16,
  "nodecpucountdivisor": 16, //??
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ "milan0001", "milan0002","milan0003","milan0004","milan0005" ]
})

db.getSiblingDB("iris").clusters.insertOne({
  "name": "ampt",
  "nodecpucount": 128,
  "nodecpucountdivisor": 16, //??
  "nodememgb": 1024,
  "chargefactor": 0.8,
  "nodecpusmt": 2, // threads per core
  "nodegpucount": 4,
  "nodegpumemgb": 40,
  "members": [ "ampt001", "ampt002","ampt003","ampt004","ampt005" ]
})

db.getSiblingDB("iris").clusters.insertOne({
  "name": "psana",
  "nodecpucount": 16,
  "nodecpucountdivisor": 16, //??
  "nodememgb": 512,
  "chargefactor": 0.8,
  "nodecpusmt": 1, // threads per core
  "members": [ ]
})

// Too lazy to create all the cluster members for psana
for(c=1200;c<1600;c++) {   db.getSiblingDB("iris").clusters.updateOne({"name": "psana"}, {"$addToSet": {"members": "psana"+c}})}


// Similar to clusters, physical volumes are storage resources.
// Like Kubernetes, physical volumes are associated with a storage class ( SSD/Disk/Tape ) etc.

db.getSiblingDB("iris").physical_volumes.createIndex({"name": 1}, unique=true)

// User homes first
db.getSiblingDB("iris").physical_volumes.insertOne({
  "name": "wekassd2022",
  "storageclass": "ssd",
  "gigabytes": 1000000,
  "inodes": 100000
})

// End the description of resources....

// Facilities purchase compute and storage on various clusters and volumes.
db.getSiblingDB("iris").facility_compute_purchases.createIndex({"facility": 1, "clustername": 1, "start": -1}, unique=true)
db.getSiblingDB("iris").facility_storage_purchases.createIndex({"facility": 1, "storagename": 1, "purpose": 1, "start": -1}, unique=true)

db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "rome-b050",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 100000
})
db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "milan-srcf",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 200000
})
db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "LCLS",
  "clustername": "psana",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 300000
})

db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "CryoEM",
  "clustername": "rome-b050",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 200000
})
db.getSiblingDB("iris").facility_compute_purchases.insertOne({
  "facility": "CryoEM",
  "clustername": "milan-srcf",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "slachours": 100000
})

db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "wekassd2022",
  "purpose": "science-data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 20000000,
  "inodes": 100000000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "wekassd2022",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 100000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "LCLS",
  "storagename": "wekassd2022",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 100000,
})

db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "wekassd2022",
  "purpose": "science-data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 40000000,
  "inodes": 400000000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "wekassd2022",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 5500000,
  "inodes": 7600000,
})
db.getSiblingDB("iris").facility_storage_purchases.insertOne({
  "facility": "CryoEM",
  "storagename": "wekassd2022",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 5500000,
  "inodes": 7600000,
})

// Users and groups.
// Of course, user has other information like full name, email etc. Maybe some of that comes from inCommon?
db.getSiblingDB("iris").users.createIndex({"username": 1}, unique=true)
db.getSiblingDB("iris").users.createIndex({"uidnumber": 1}, unique=true)
db.getSiblingDB("iris").users.createIndex({"eppns": 1}, {unique: true, partialFilterExpression: { eppns: { $type: "array" }}})
db.getSiblingDB("iris").users.insertOne({ "username": "aquila", "uidnumber": 123, "eppns": [ "aquila@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "aquila@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "mcbrowne", "uidnumber": 124, "eppns": [ "mcbrowne@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "mcbrowne@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "snelson", "uidnumber": 125, "eppns": [ "snelson@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "snelson@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "tmalla", "uidnumber": 126, "eppns": [ "tmalla@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "tmalla@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "yanwen", "uidnumber": 127, "eppns": [ "yanwen@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "yanwen@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "mshankar", "uidnumber": 128, "eppns": [ "mshankar@slac.stanford.edu", "muralis@stanford.edu" ], "shell": "/bin/bash", "preferredemail": "mshankar@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "ytl", "uidnumber": 129, "eppns": [ "ytl@slac.stanford.edu", "yee379@stanford.edu" ], "shell": "/bin/bash", "preferredemail": "ytl@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "wilko", "uidnumber": 130, "eppns": [ "wilko@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "wilko@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "perazzo", "uidnumber": 131, "eppns": [ "perazzo@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "perazzo@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "yemi", "uidnumber": 132, "eppns": [ "yemi@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "yemi@slac.stanford.edu" })
db.getSiblingDB("iris").users.insertOne({ "username": "richard", "uidnumber": 133, "eppns": [ "richard@slac.stanford.edu" ], "shell": "/bin/bash", "preferredemail": "richard@slac.stanford.edu" })

// User compute allocation percent
db.getSiblingDB("iris").user_allocations.createIndex({"username": 1, "allocationid": 1}, unique=true)

// User_Volume_Storage_Allocation
db.getSiblingDB("iris").user_storage_allocation.createIndex({"username": 1, "purpose": 1}, unique=true)
db.getSiblingDB("iris").user_storage_allocation.createIndex({"username": 1, "volume_name": 1})

["mshankar", "ytl", "wilko", "perazzo", "yemi", "richard"].forEach(function(u){
  db.getSiblingDB("iris").user_storage_allocation.insertOne({
    "username": u,
    "storagename": "wekassd2022",
    "purpose": "home",
    "gigabytes": 20,
    "inodes": 1000,
    "rootfolder": "<prefix>/homes/" + u[0] + "/" + u
  })
})

db.getSiblingDB("iris").user_storage_usage.createIndex({"alloc_id": 1, "date": 1}, unique=true)

["mshankar", "ytl", "wilko", "perazzo", "yemi", "richard"].forEach(function(u){
  let allocid = db.getSiblingDB("iris").user_storage_allocation.findOne({"username": u, "purpose": "home" })["_id"]
  db.getSiblingDB("iris").user_storage_usage.insertOne({
    "allocid": allocid,
    "date": new Date(),
    "gigabytes": 19.99,
    "inodes": 976,
  })
})




db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "RepoMembership", "username" : "wilko", "reponame" : "cxi12345", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "RepoMembership", "username" : "wilko", "reponame" : "CA104", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "RepoMembership", "username" : "mshankar", "reponame" : "CA104", "requestedby": "mshankar", "timeofrequest": new Date()})
// // Two people requesting the same repo/facility
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewRepo", "username" : "wilko",    "reponame" : "cxi23456", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewRepo", "username" : "mshankar", "reponame" : "cxi23456", "requestedby": "mshankar", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewFacility", "username" : "wilko",    "facilityname" : "RUBIN", "requestedby": "wilko", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "NewFacility", "username" : "mshankar", "facilityname" : "RUBIN", "requestedby": "mshankar", "timeofrequest": new Date()})
//
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "paul@stanford.edu", "preferredUserName": "paul", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "george@stanford.edu", "preferredUserName": "george", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "john@stanford.edu", "preferredUserName": "john", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "ringo@stanford.edu", "preferredUserName": "ringo", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
// // These are requests for user account whose username already exists in the system.
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "wilko@stanford.edu", "preferredUserName": "wilko", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "mshankar@stanford.edu", "preferredUserName": "mshankar", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})
db.getSiblingDB("iris").requests.insertOne({ "reqtype" : "UserAccount", "eppn" : "ytl@stanford.edu", "preferredUserName": "ytl", "reponame" : "cxi12345", "facilityname" : "LCLS", "timeofrequest": new Date()})



// an access class defines an abstraiton of access to some data. as such, by itself it merely defines essentially just a gidnumber. these shoudl be associated with eitehr: (note that all three can apply to all related storage)
// 1) facility (to have all data under that facility with say the same primiarly group id defined in the access group)
// 2) to a repo; so that the repo has this gid
// 3) to a volume so that only that volume has that gid

db.getSiblingDB("iris").access_groups.createIndex({"name": 1}, unique=true)
db.getSiblingDB("iris").access_groups.createIndex({"gidnumber": 1}, unique=true)

// facility service account; use the gid as default and uids from members as primary owners
// These do not belong to a repo.
db.getSiblingDB("iris").access_groups.insertOne({"name": "lcls-pcdsmgr", "gidnumber": 808080, "members": [ "pcdmgr" ]})
db.getSiblingDB("iris").access_groups.insertOne({"name": "cryo-data", "gidnumber": 6363, "members": [ "cryo-daq"]})

// no members means nothing special - use the principal, leaders and users for this group
db.getSiblingDB("iris").access_groups.insertOne({"name": "cxi12345-analysis", "repo": "cxi12345", "gidnumber": 12345, "members": ["mshankar"]})
db.getSiblingDB("iris").access_groups.insertOne({"name": "CS14", "gidnumber": "repo": "CS14", 8393, "members": []})
db.getSiblingDB("iris").access_groups.insertOne({"name": "CA104", "gidnumber": "repo": "CA104", 8343, "members": []})


// End of users and groups


// Repos now - repos are the fundamental unit of allocations of resources

db.getSiblingDB("iris").repos.createIndex({"name": 1}, unique=true)
db.getSiblingDB("iris").repos.createIndex({"leader": 1}) // For performance
db.getSiblingDB("iris").repos.insertOne({
  "name": "cxi12345",
  "facility": "LCLS",
  "principal": "aquila",
  "leaders": [ "snelson" ],
  "users": [ "aquila", "mcbrowne", "snelson", "tmalla", "yanwen", "mshankar" ]
})

db.getSiblingDB("iris").repos.insertOne({
  "name": "CS14",
  "facility": "CryoEM",
  "principal": "ytl",
  "leaders": [],
  "users": [ "cszhang" ]

})
db.getSiblingDB("iris").repos.insertOne({
  "name": "CA104",
  "facility": "CryoEM",
  "principal": "mshankar",
  "leaders": [ "ytl" ],
  "users": [ ]
})


// Repo allocations and usage.
// We separate out compute and storage allocations.
// Apologies for the long collection names; this makes it easier when building out the model.

// We allocate compute on a specific cluster.
db.getSiblingDB("iris").repo_compute_allocations.createIndex({"repo": 1, "clustername": 1, "start": -1}, unique=true)

// compute allocations
// in terms of a compute quota; we assume that slachours already considers things like cpu/gpu and has the
// calculated weights required for varying cluster performances.
// Each allocation can be divided up into qos'es
// This lets you allocate, for example, 500 hours of regular processing and 500 hours of premium high-priority processing.

db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "cxi12345",
  "clustername": "psana",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "qoses": {
    "cxi12345": {
      "slachours": 500,
      "chargefactor": 0.7765
    },
    "cxi12345-priority": {
      "slachours": 500,
      "chargefactor": 1.25
    }
  }
})

db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "cxi12345",
  "clustername": "milan-srcf",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "qoses": {
    "cxi12345": {
      "slachours": 600,
      "chargefactor": 0.7765
    },
    "cxi12345-priority": {
      "slachours": 600,
      "chargefactor": 1.25
    }
  }
})

// This is last years allocation for the same repo
db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "cxi12345",
  "clustername": "psana",
  "start": ISODate("2020-05-01T00:00:00-07:00"), // Last years allocations
  "end": ISODate("2020-12-31T00:00:00Z"),
  "qoses": {
    "cxi12345": {
      "slachours": 7865320,
      "chargefactor": 1.0
    },
    "cxi12345-priority": {
      "slachours": 1,
      "chargefactor": 1.25
    }
  }
})

db.getSiblingDB("iris").repo_compute_allocations.insertOne({
  "repo": "CA104",
  "clustername": "milan-srcf",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "qoses": {
    "CA104": {
      "slachours": 400,
      "chargefactor": 0.7765
    },
    "CA104-priority": {
      "slachours": 400,
      "chargefactor": 1.25
    }
  }
})


// We allocate compute on a specific physical volume for a particular purpose.
// For example, we'd allocate 10TB for data, 10GB for scratch etc.
db.getSiblingDB("iris").repo_storage_allocations.createIndex({"repo": 1, "storagename": 1, "purpose": 1, "start": -1}, unique=true)
db.getSiblingDB("iris").repo_storage_allocations.insertOne({
  "repo": "cxi12345",
  "storagename": "wekassd2022",
  "purpose": "science-data",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 200000,
  "inodes": 1000,
  "rootfolder": "<prefix>/cxi/cxi12345/xtc"
})
db.getSiblingDB("iris").repo_storage_allocations.insertOne({
  "repo": "cxi12345",
  "storagename": "wekassd2022",
  "purpose": "scratch",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 2000,
  "inodes": 10000,
  "rootfolder": "<prefix>/cxi/cxi12345/scratch"
})
db.getSiblingDB("iris").repo_storage_allocations.insertOne({
  "repo": "cxi12345",
  "storagename": "wekassd2022",
  "purpose": "group",
  "start": ISODate("2021-05-01T00:00:00-07:00"),
  "end": ISODate("2100-01-01T00:00:00Z"), // Distant future
  "gigabytes": 20,
  "inodes": 100,
  "rootfolder": "<prefix>/cxi/cxi12345/results"
})


// Jobs have lots of information from SLURM in addition to the final mapping into repo, year and resource name.
db.getSiblingDB("iris").jobs.createIndex({"jobId": 1, "startTs": 1, "clustername": 1}, unique=true)
db.getSiblingDB("iris").jobs.createIndex({"repo": 1, "year": -1, "clustername": 1})  // Performance index


// We cache the compute and storage allocation usage in the usagecache collections
db.getSiblingDB("iris").repo_overall_compute_usage.createIndex({"allocationid": 1, "qos": 1}, unique=true)
db.getSiblingDB("iris").repo_overall_storage_usage.createIndex({"allocationid": 1}, unique=true)

db.getSiblingDB("iris").repo_daily_compute_usage.createIndex({"allocationid": 1, "date": 1}, unique=true)
db.getSiblingDB("iris").repo_peruser_compute_usage.createIndex({"allocationid": 1, "username": 1}, unique=true)

// For storage updates, we already have the allocation ID
db.getSiblingDB("iris").repo_daily_storage_usage.createIndex({"allocationid": 1, "date": 1}, unique=true)
