
db.getSiblingDB("iris").resource_types.createIndex({"type": 1}, unique=true)
db.getSiblingDB("iris").resource_types.insertOne({"type": "compute", "units": "node_hours"})
db.getSiblingDB("iris").resource_types.insertOne({"type": "storage", "units": "GB"})
db.getSiblingDB("iris").resource_types.insertOne({"type": "inodes", "units": "inodes"})

db.getSiblingDB("iris").facilities.createIndex({"name": 1}, unique=true)
// Facilities have compute classes and storage classes associated with them.


db.getSiblingDB("iris").facilities.insertOne({
  "name" : "LCLS",
  "resources": { // necessary??
    "compute": {
      "type": "compute"
    },
    "storage": {
      "type": "storage"
    }
  },
  "czars": [ "lcls-pcdsdata"], // set primary uid on all volumes
  "access_class": [ "lcls-pcdsmgr" ] // set primary gid on all volumes
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "CryoEM",
  "resources": { // necessary??
    "compute": {
      "type": "compute"
    },
    "storage": {
      "type": "storage"
    }
  },
  "czars": [ "cryo-daq"], // set primary uid on all volumes
  "access_class": [ "cryo-data" ] // set primary gid on all volumes
})

db.getSiblingDB("iris").facilities.insertOne({
  "name" : "CryoEM",
  "resources": { // necessary??
    "compute": {
      "type": "compute"
    },
    "storage": {
      "type": "storage"
    }
  },
  "czars": [ "johannes"], // set primary uid on all volumes
  "access_class": [ ] // set primary gid on all volumes
})




// define a capacity to be the actual resources provided to each facility
// keep a count of the number of units of each type of cluster - this shoudl make it simple for admins to add new resrouces to each facility

db.getSiblingDB("iris").capacity.createIndex({"facility": 1, "resource": 1})


db.getSiblingDB("iris").capacity.insertOne({
  "facility": "LCLS",
  "resource": "compute",
  "active": false, // aid searching for most current
  "from": "2020-01-01T00:00:00-07:00",
  "to": "2021-05-01T00:00:00-07:00",
  // keep track of understandable units here - let the math deal with conversions (which could change)
  "clusters": {
    "rome-b050": 23.5, // nodes
    "milan-srcf": 10.0
  }
})

db.getSiblingDB("iris").capacity.insertOne({
  "facility": "LCLS",
  "resource": "compute",
  "active": true,
  "from": "2021-05-01T00:00:00-07:00",
  "to": null, // implies current
  "clusters": {
    "rome-b050": 23.5, // nodes
    "milan-srcf": 10.0,
    "ampt": 1.0
  }
})





db.getSiblingDB("iris").resource_capacity.insertOne({
  "facility": "LCLS",
  "resource": "data",
  "year": 2022,
  "storage": 3000,
  "inodes": 1000000
})
db.getSiblingDB("iris").resource_capacity.insertOne({
  "facility": "LCLS",
  "resource": "scratch",
  "year": 2022,
  "storage": 3000,
  "inodes": 1000000
})

db.getSiblingDB("iris").resource_capacity.insertOne({
  "facility": "CryoEM",
  "resource": "data",
  "year": 2022,
  "storage": 3000,
  "inodes": 1000000
})
db.getSiblingDB("iris").resource_capacity.insertOne({
  "facility": "CryoEM",
  "resource": "scratch",
  "year": 2022,
  "storage": 3000,
  "inodes": 1000000
})
// Capacity for SUNCAT for 2022

db.getSiblingDB("iris").resource_capacity.insertOne({
  "facility": "SUNCAT",
  "resource": "data",
  "year": 2022,
  "storage": 3000,
  "inodes": 1000000
})
db.getSiblingDB("iris").resource_capacity.insertOne({
  "facility": "SUNCAT",
  "resource": "scratch",
  "year": 2022,
  "storage": 3000,
  "inodes": 1000000
})

db.getSiblingDB("iris").repos.createIndex({"name": 1}, unique=true)
db.getSiblingDB("iris").repos.createIndex({"leader": 1}) // For performance
db.getSiblingDB("iris").repos.createIndex({"group": 1}, unique=true)
// Repos have a PI and can belong to multiple facilities
db.getSiblingDB("iris").repos.insertOne({
  "name": "cxi12345",
  "facility": "LCLS",
  "principal": "aquila",
  "leaders": [ "snelson" ],
  "users": [ "aquila", "mcbrowne", "snelson", "tmalla", "yanwen", "mshankar" ],
  "group": "cxi12345",
  "access_groups": [ "cxi12345-g1", "cxi12345-g2"]
})

db.getSiblingDB("iris").repos.insertOne({
  "name": "20191205-CS14",
  "facility": "CryoEM",
  "principal": "ytl",
  "leaders": [],
  "users": [ "ytl" ],
  "group": "20191205-CS14"
})
db.getSiblingDB("iris").repos.insertOne({
  "name": "20191205-CA104",
  "facility": "CryoEM",
  "principal": "mshankar",
  "leaders": [ "ytl" ],
  "users": [ ],
  "group": "20191205-CA014"
})

db.getSiblingDB("iris").qos.createIndex({"name": 1, "repo": 1}, unique=true)
db.getSiblingDB("iris").qos.createIndex({"qos": 1, "partition": 1}) // For performance

// For every repo, we have at least one QOS.
// The lookup is going from a SLURM job detail to the repo.
// We use the account name (which should be the same as the repo); if that fails, we use (qos, partition) to determine the repo
db.getSiblingDB("iris").qos.insertOne({
  "name": "normal",
  "repo": "cxi12345",
  "qos": "LCLS-cxi12345-normal",
  "partition": "psanaq"
})

db.getSiblingDB("iris").qos.insertOne({
  "name": "hihi",
  "repo": "cxi12345",
  "qos": "LCLS-cxi12345-hihi",
  "partition": "psfehhiprioq"
})

db.getSiblingDB("iris").qos.insertOne({
  "name": "hprio",
  "repo": "cxi12345",
  "qos": "LCLS-cxi12345-hprio",
  "partition": "psfehprioq"
})

db.getSiblingDB("iris").qos.insertOne({
  "name": "feh",
  "repo": "cxi12345",
  "qos": "LCLS-cxi12345-feh",
  "partition": "psfehq"
})

db.getSiblingDB("iris").qos.insertOne({
  "name": "normal",
  "repo": "20191205-CS14",
  "qos": "LCLS-20191205-CS14-normal",
  "partition": "CryoGPU"
})


db.getSiblingDB("iris").repos.insertOne({
  "name": "CoffeeWorld",
  "facility": "LCLS",
  "principal": "coffee",
  "leaders": [],
  "users": [ "coffee" ],
  "group": "CoffeeWorld"
})
// CoffeeWorld belongs to multiple partitions; so it has a QOS defined for each partition.
db.getSiblingDB("iris").qos.insertOne({
  "name": "LCLS-normal",
  "repo": "CoffeeWorld",
  "qos": "LCLS-CoffeeWorld-normal",
  "partition": "psanagpuq"
})
db.getSiblingDB("iris").qos.insertOne({
  "name": "Suncat-normal",
  "repo": "CoffeeWorld",
  "qos": "Suncat-CoffeeWorld-normal",
  "partition": "suncat"
})


db.getSiblingDB("iris").allocations.createIndex({"repo": 1, "facility": 1, "resource": 1, "year": -1}, unique=true)

db.getSiblingDB("iris").allocations.insertOne({
  "facility": "LCLS",
  "resource": "CPU",
  "repo": "cxi12345",
  "year": 2022,
  "compute": 3000
})

db.getSiblingDB("iris").allocations.createIndex({"repo": 1, "facility": 1, "resource": 1, "year": -1}, unique=true)

db.getSiblingDB("iris").allocations.insertOne({
  "facility": "LCLS",
  "resource": "data",
  "repo": "cxi12345",
  "year": 2022,
  "storage": 5544,
  "inodes": 4455
})

db.getSiblingDB("iris").allocations.insertOne({
  "facility": "LCLS",
  "resource": "scratch",
  "repo": "cxi12345",
  "year": 2022,
  "storage": 6655,
  "inodes": 5566
})

// Of course, user has other information like full name, email etc. Maybe some of that comes from inCommon?
db.getSiblingDB("iris").users.createIndex({"username": 1}, unique=true)
db.getSiblingDB("iris").users.createIndex({"uidnumber": 1}, unique=true)
db.getSiblingDB("iris").users.createIndex({"eppns": 1}, {unique: true, partialFilterExpression: { eppns: { $type: "array" }}})
db.getSiblingDB("iris").users.insertOne({ "username": "aquila", "uidnumber": 123 })
db.getSiblingDB("iris").users.insertOne({ "username": "mcbrowne", "uidnumber": 124 })
db.getSiblingDB("iris").users.insertOne({ "username": "snelson", "uidnumber": 125 })
db.getSiblingDB("iris").users.insertOne({ "username": "tmalla", "uidnumber": 126 })
db.getSiblingDB("iris").users.insertOne({ "username": "yanwen", "uidnumber": 127 })
db.getSiblingDB("iris").users.insertOne({ "username": "mshankar", "uidnumber": 128, "eppns": [ "mshankar@slac.stanford.edu", "muralis@stanford.edu" ] })
db.getSiblingDB("iris").users.insertOne({ "username": "ytl", "uidnumber": 129, "eppns": [ "ytl@slac.stanford.edu", "yee379@stanford.edu" ] })
db.getSiblingDB("iris").users.insertOne({ "username": "wilko", "uidnumber": 130 })


db.getSiblingDB("iris").access_groups.createIndex({"name": 1}, unique=true)
db.getSiblingDB("iris").access_groups.createIndex({"gid_number": 1}, unique=true)
db.getSiblingDB("iris").access_groups.insertOne({"name": "cxi12345-g1", "gid_number": 123, "members": [ "mshankar", "wilko", "ytl" ]})
db.getSiblingDB("iris").access_groups.insertOne({"name": "cxi12345-g2", "gid_number": 124, "members": [ "mcbrowne", "yanwen"]})

db.getSiblingDB("iris").user_allocations.createIndex({"repo": 1, "username": 1, "facility": 1, "resource": 1, "year": -1}, unique=true)


// This is all backend stuff from now on..
db.getSiblingDB("iris").cluster.createIndex({"name": 1}, unique=true)

db.getSiblingDB("iris").cluster.insertOne({
  "name": "rome-b050",
  "node_cpu_count": 128,
  "node_cpu_count_divisor": 64, //?? sockets?
  "node_mem_gb": 512,
  "charge_factor": 0.8,
  "node_cpu_smt": 1, // threads per core
  "members": [ "rome0001", "rome0002","rome0003","rome0004","rome0005" ]
})


db.getSiblingDB("iris").cluster.insertOne({
  "name": "milan-srcf",
  "node_cpu_count": 16,
  "node_cpu_count_divisor": 16, //??
  "node_mem_gb": 512,
  "charge_factor": 0.8,
  "node_cpu_smt": 1, // threads per core
  "members": [ "milan0001", "milan0002","milan0003","milan0004","milan0005" ]
})

db.getSiblingDB("iris").cluster.insertOne({
  "name": "ampt",
  "node_cpu_count": 128,
  "node_cpu_count_divisor": 16, //??
  "node_mem_gb": 1024,
  "charge_factor": 0.8,
  "node_cpu_smt": 2, // threads per core
  "node_gpu_count": 4,
  "node_gpu_mem_gb": 40,
  "members": [ "ampt001", "ampt002","ampt003","ampt004","ampt005" ]
})




db.getSiblingDB("iris").partitions.createIndex({"name": 1}, unique=true)
db.getSiblingDB("iris").partitions.insertOne({ "name": "psanaq", "charge_factor": 1.0 })
db.getSiblingDB("iris").partitions.insertOne({ "name": "psanagpuq", "charge_factor": 1.0 })
db.getSiblingDB("iris").partitions.insertOne({ "name": "psfehq", "charge_factor": 1.0 })
db.getSiblingDB("iris").partitions.insertOne({ "name": "psfehprioq", "charge_factor": 1.0 })
db.getSiblingDB("iris").partitions.insertOne({ "name": "psfehhiprioq", "charge_factor": 1.0 })
db.getSiblingDB("iris").partitions.insertOne({ "name": "cryoem", "charge_factor": 1.0 })
db.getSiblingDB("iris").partitions.insertOne({ "name": "suncat", "charge_factor": 1.0 })


// Jobs have lots of information from SLURM in addition to the final mapping into repo, year and resource name.
db.getSiblingDB("iris").jobs.createIndex({"jobId": 1, "startTs": 1, "computeId": 1}, unique=true)
db.getSiblingDB("iris").jobs.createIndex({"repo": 1, "year": -1, "resource": 1}) // Performance index

db.getSiblingDB("iris").diskusage.createIndex({"facility": 1, "resource": 1, "year": -1, "repo": 1, "date": 1}, unique=true)
for(i=0;i<75;i++) {
  db.getSiblingDB("iris").diskusage.insertOne({
    "facility": "LCLS",
    "resource": "data",
    "year": 2022,
    "repo": "cxi12345",
    "folder": "/reg/data/ana01/cxi/cxi12345",
    "storage": 56320,
    "inodes": 3456,
    "date": new Date(1640995200000 + i*86400*1000)
  })
  db.getSiblingDB("iris").diskusage.insertOne({
    "facility": "LCLS",
    "resource": "scratch",
    "year": 2022,
    "repo": "cxi12345",
    "folder": "/reg/scratch/ana01/cxi/cxi12345",
    "storage": 56320,
    "inodes": 100000000,
    "date": new Date(1640995200000 + i*86400*1000)
  })
}
